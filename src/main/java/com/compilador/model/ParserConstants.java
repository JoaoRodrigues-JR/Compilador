package com.compilador.model;

public interface ParserConstants
{
     int START_SYMBOL = 40;

    int FIRST_NON_TERMINAL    = 40;
    int FIRST_SEMANTIC_ACTION = 72;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1 },
        { -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2,  2, -1, -1, -1, -1,  1, -1,  2, -1,  2, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  4, -1,  4, -1, -1, -1, -1,  4,  4, -1, -1, -1,  4, -1, -1, -1, -1 },
        { -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  5, -1,  5,  6,  6, -1, -1,  5,  5, -1, -1,  6,  5,  6, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  7, -1, 10, -1, -1, -1, -1,  9,  8, -1, -1, -1, 11, -1, -1, -1, -1 },
        { -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 14, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, 15, -1, -1, -1, -1, -1, -1, 15, -1, 15, -1, -1, -1 },
        { -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, 16, 16, 17, -1, -1, -1, -1, -1, 16, -1, 16, -1, 17, 17 },
        { -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 22, -1, -1, -1, -1, -1, -1, 19, -1, 21, -1, -1, -1 },
        { -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 26, 26, 26, 26, 26, -1, -1, 26, -1, -1, -1, -1, 26, 26, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, 34 },
        { -1, 36, 36, 36, 36, 36, -1, -1, 36, -1, -1, -1, -1, 36, 36, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1 },
        { -1, 37, -1, -1, -1, -1, 38, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, 37, -1, -1, 37, -1, 37, -1, 37, 37, -1, -1, -1, -1, -1, -1, 37, -1, 37, -1, -1, -1 },
        { -1, 40, 40, 40, 40, 40, -1, -1, 43, -1, -1, -1, -1, 40, 40, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1 },
        { -1, 44, 44, 44, 44, 44, -1, -1, -1, -1, -1, -1, -1, 44, 44, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 45, -1, -1, -1, -1, 45, 45, -1, 46, 46, 46, 46, -1, -1, -1, -1, 45, 45, -1, -1, 45, -1, 45, -1, 45, 45, -1, -1, -1, -1, -1, -1, 45, -1, 45, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 48, 49, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 51, 51, 51, 51, 51, -1, -1, -1, -1, -1, -1, -1, 51, 51, -1, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 52, -1, -1, -1, -1, 52, 52, -1, 52, 52, 52, 52, 53, 54, -1, -1, 52, 52, -1, -1, 52, -1, 52, -1, 52, 52, -1, -1, -1, -1, -1, -1, 52, -1, 52, -1, -1, -1 },
        { -1, 55, 55, 55, 55, 55, -1, -1, -1, -1, -1, -1, -1, 55, 55, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 56, -1, -1, -1, -1, 56, 56, -1, 56, 56, 56, 56, 56, 56, 57, 58, 56, 56, -1, -1, 56, -1, 56, -1, 56, 56, -1, -1, -1, -1, -1, -1, 56, -1, 56, -1, -1, -1 },
        { -1, 59, 60, 61, 62, 63, -1, -1, -1, -1, -1, -1, -1, 65, 66, -1, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
    };

    int[][] PRODUCTIONS = 
    {
        { 173,  33,  41,  48,  28, 174 },
        {  42 },
        {   0 },
        {  32,  43 },
        {  45, 175,  46, 176,  19,  44 },
        {  43 },
        {   0 },
        {  23 },
        {  31 },
        {  30 },
        {  25 },
        {  35 },
        {   2, 177,  47 },
        {  18,  46 },
        {   0 },
        {  50,  19,  49 },
        {  48 },
        {   0 },
        {  51 },
        {  52 },
        {  53 },
        {  56 },
        {  59 },
        {   2, 177,  20,  61, 178 },
        {  34,  21,  46, 179,  22 },
        {  26,  21,  54,  22 },
        {  61, 180,  55 },
        {  18,  54 },
        {   0 },
        { 181,  36,  61,  57,  28, 182 },
        {  24, 183,  61, 184,  48, 185,  58 },
        {  57 },
        {   0 },
        {  27, 186,  48,  60 },
        {  39,  61, 187 },
        {  38,  61, 188 },
        {  63,  62 },
        {   0 },
        {   7,  63, 189,  62 },
        {   8,  63, 190,  62 },
        {  64 },
        {  37, 191 },
        {  29, 192 },
        {   9,  63, 193 },
        {  67,  65 },
        {   0 },
        {  66, 194,  67, 195 },
        {  10 },
        {  11 },
        {  12 },
        {  13 },
        {  69,  68 },
        {   0 },
        {  14,  69, 196,  68 },
        {  15,  69, 197,  68 },
        {  71,  70 },
        {   0 },
        {  16,  71, 198,  70 },
        {  17,  71, 199,  70 },
        {   2, 200 },
        {   3, 201 },
        {   4, 202 },
        {   5, 203 },
        {   6, 204 },
        {  21,  61,  22 },
        {  14,  71 },
        {  15,  71, 205 }
    };
    
    String[] PARSER_ERROR =
    {
        "",
        //"Era esperado fim de programa"
        "esperado EOF",
        //"Era esperado id",
        "esperado identificador",
        //"Era esperado cte_int",
        "esperado constante_int",
        //"Era esperado cte_float",
        "esperado constante_float",
        //"Era esperado cte_char",
        "esperado constante_char",
        //"Era esperado cte_string",
        "esperado constante_string",
        "esperado &",
        "esperado |",
        "esperado !",
        "esperado ==",
        "esperado !=",
        "esperado <",
        "esperado >",
        "esperado +",
        "esperado -",
        "esperado *",
        "esperado /",
        "esperado ,",
        "esperado ;",
        "esperado =",
        "esperado (",
        "esperado )",
        "esperado bool",
        "esperado case",
        "esperado char",
        "esperado echo",
        "esperado do",
        "esperado end",
        "esperado false",
        "esperado float",
        "esperado int",
        "esperado local",
        "esperado module",
        "esperado request",
        "esperado string",
        "esperado switch",
        "esperado true",
        "esperado until",
        "esperado while",
        //"<program> inválido",
        "esperado module",
        //"<dec_var_opcional> inválido",
        "esperado identificador echo do local request switch",
        //"<dec_var> inválido",
        "esperado local",
        //"<dec_var_aux> inválido",
        "esperado bool char float int string",
        //"<dec_var_aux1> inválido",
        "esperado identificador bool char echo do float int request string switch",
        //"<tipo> inválido",
        "esperado bool char float int string",
        //"<id_lista> inválido",
        "esperado identificador",
        //"<id_lista1> inválido",
        "esperado , ; )",
        //"<comand_lista> inválido",
        "esperado identificador echo do request switch",
        //"<comand_lista1> inválido",
        "esperado identificador case echo do end request switch until while",
        //"<comando> inválido",
        "esperado identificador echo do request switch",
        //"<atribuicao> inválido",
        "esperado identificador",
        //"<entrada> inválido",
        "esperado request",
        //"<saida> inválido",
        "esperado echo",
        //"<exp_lista> inválido",
        "esperado expressao",
        //"<exp_lista1> inválido",
        "esperado , )",
        //"<selecao> inválido",
        "esperado switch",
        //"<selecao_aux> inválido",
        "esperado case",
        //"<selecao_aux1> inválido",
        "esperado case end",
        //"<repeticao> inválido",
        "esperado do",
        //"<repeticao_aux> inválido",
        "esperado until while",
        //"<expressao> inválido",
        "esperado expressao",
        //"<expressao1> inválido",
        "esperado expressao",
        //"<elemento> inválido",
        "esperado expressao",
        //"<relacional> inválido",
        "esperado expressao",
        //"<relacional1> inválido",
        "esperado expressao",
        //"<operador_relacional> inválido",
        "esperado == != < >",
        //"<aritmetica> inválido",
        "esperado expressao",
        //"<aritmetica1> inválido",
        "esperado expressao",
        //"<termo> inválido",
        "esperado expressao",
        //"<termo1> inválido",
        "esperado expressao",
        //"<fator> inválido"
        "esperado expressao",
    };
}
